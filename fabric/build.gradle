//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    // Mod Hosting Publish
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

archivesBaseName = "${archives_base_name}-Fabric"
def mainArtifactFile = new File(new File(buildDir, 'libs'), "$archivesBaseName-${version}.jar")
def changelogFile = file('../changelog.txt')

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    modApi("com.google.inject:guice:${project.guice_version}") {
        exclude(group: 'com.google.guava')
    }
    include "com.google.inject:guice:${project.guice_version}"
    include 'javax.inject:javax.inject:1'
    include 'aopalliance:aopalliance:1.0'

    compileOnly project(":common")
    annotationProcessor project(':processor-fabric')
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(':common').sourceSets.main.resources
    inputs.property 'version', project.version

    def buildProps = project.properties.clone()

    filesMatching(['**/*.json', 'pack.mcmeta']) {
        expand buildProps
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from project(':common').sourceSets.main.allSource
    from sourceSets.main.allSource
}

javadoc {
    source project(':common').sourceSets.main.allJava
    source sourceSets.main.allJava
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

if (hasProperty('curseForgeApiKey')) {
    curseforge {
        apiKey = curseForgeApiKey
        project {
            id = '501373'
            changelog = changelogFile
            releaseType = project.release_type
            addGameVersion project.minecraft_version
            addGameVersion '1.16.4'
            addGameVersion '1.16.3'
            addGameVersion '1.16.2'
            addGameVersion 'Java 8'
            addGameVersion 'Fabric'
            mainArtifact(mainArtifactFile) {
                displayName = "$archivesBaseName-$version"
            }
        }
        options {
            javaIntegration = false
            forgeGradleIntegration = false
        }
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

if (hasProperty('modrinthApiKey')) {
    task publishModrinth(type: TaskModrinthUpload) {
        token = modrinthApiKey
        projectId = 'RAXqYPH1'
        versionNumber = "$version+fabric"
        versionName = project.mod_version
        uploadFile = mainArtifactFile
        changelog = changelogFile.getText()
        versionType = project.release_type
        gameVersions.add(project.minecraft_version as String)
        gameVersions.add('1.16.2')
        loaders.add('fabric')
        loaders.add('quilt')
    }
}

if (hasProperty('nexusUsername') || System.getenv("NEXUS_USERNAME") != null) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId project.maven_group
                artifactId project.archivesBaseName
                version project.version
                pom {
                    name = project.readable_name
                    packaging = 'jar'
                    description = project.maven_description
                    url = project.modrinth_url
                    scm {
                        connection = "scm:svn:${project.github_url}.git"
                        developerConnection = "scm:svn:${project.github_url}.git"
                        url = project.github_url
                    }

                    licenses {
                        license {
                            name = project.license_name
                            url = project.license_url
                        }
                    }

                    developers {
                        developer {
                            id = 'the_fireplace'
                            name = 'The_Fireplace'
                            email = 'git@the-fireplace.dev'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = findProperty('nexusUsername') ?: System.getenv("NEXUS_USERNAME")
                    password = findProperty('nexusPassword') ?: System.getenv("NEXUS_PASSWORD")
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}